import { Users, UserPlus, BookOpen, FileText, Calendar, Plus, X } from 'lucide-react';
import { useState } from 'react';
import type { ReactNode, ReactElement } from 'react';
import { CreateUserForm } from './CreateUserForm';

interface KpiCardProps {
  icon: ReactNode;
  label: string;
  value: string;
  trend?: 'up' | 'down' | null;
  trendLabel?: string;
}

function KpiCard({ 
  icon, 
  label, 
  value,
  trend = null,
  trendLabel = ''
}: KpiCardProps): ReactElement {
  return (
    <div className="bg-white rounded-lg border border-gray-200 p-5 shadow-sm hover:shadow transition-shadow duration-200">
      <div className="flex items-start justify-between">
        <div>
          <p className="text-sm font-medium text-gray-500 uppercase tracking-wider">{label}</p>
          <p className="mt-1 text-2xl font-semibold text-gray-900">{value}</p>
        </div>
        <div className="p-2 rounded-lg bg-brand-50 text-brand-600">
          {icon}
        </div>
      </div>
      {trend && (
        <div className={`mt-3 text-xs font-medium flex items-center ${trend === 'up' ? 'text-green-600' : 'text-red-600'}`}>
          {trend === 'up' ? (
            <svg className="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M12 7a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0V7.414l-4.293 4.293a1 1 0 01-1.414 0L8 9.414l-4.293 4.293a1 1 0 01-1.414-1.414l5-5a1 1 0 011.414 0L11 10.586 14.586 7H12z" clipRule="evenodd" />
            </svg>
          ) : (
            <svg className="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M12 13a1 1 0 100 2h5a1 1 0 001-1v-5a1 1 0 10-2 0v2.586l-4.293-4.293a1 1 0 00-1.414 0L8 12.586l-4.293-4.293a1 1 0 00-1.414 1.414l5 5a1 1 0 001.414 0L11 10.414 14.586 14H12z" clipRule="evenodd" />
            </svg>
          )}
          {trendLabel}
        </div>
      )}
    </div>
  );
}

interface QuickActionButtonProps {
  icon: ReactNode;
  label: string;
  description: string;
  onClick: () => void;
}

function QuickActionButton({ 
  icon, 
  label, 
  description,
  onClick 
}: QuickActionButtonProps): ReactElement {
  return (
    <button 
      onClick={onClick}
      className="w-full p-4 rounded-lg border border-gray-200 bg-white hover:bg-gray-50 transition-all duration-200 text-left group hover:shadow-sm hover:border-brand-200"
    >
      <div className="flex items-start gap-3">
        <div className="p-2.5 rounded-lg bg-brand-50 text-brand-600 group-hover:bg-brand-100 transition-colors flex-shrink-0">
          {icon}
        </div>
        <div className="text-left">
          <h3 className="text-sm font-medium text-gray-900 group-hover:text-brand-700 transition-colors">
            {label}
          </h3>
          <p className="mt-1 text-sm text-gray-500">
            {description}
          </p>
        </div>
      </div>
    </button>
  );
}

interface NotificationItemProps {
  title: string;
  time: string;
  message: string;
  isNew?: boolean;
}

function NotificationItem({ 
  title, 
  time, 
  message,
  isNew = false
}: NotificationItemProps): ReactElement {
  return (
    <div className="p-4 hover:bg-gray-50 transition-colors border-b border-gray-100 last:border-0 group">
      <div className="flex items-start gap-3">
        <div className={`mt-1.5 flex-shrink-0 h-2 w-2 rounded-full ${isNew ? 'bg-brand-500' : 'bg-transparent'}`}></div>
        <div className="flex-1 min-w-0">
          <div className="flex items-center justify-between">
            <h3 className={`text-sm font-medium ${isNew ? 'text-gray-900' : 'text-gray-700'} group-hover:text-brand-700 transition-colors`}>
              {title}
            </h3>
            <span className="text-xs text-gray-400 group-hover:text-gray-500 transition-colors">
              {time}
            </span>
          </div>
          <p className="mt-1 text-sm text-gray-600 group-hover:text-gray-700 transition-colors">
            {message}
          </p>
        </div>
      </div>
    </div>
  );
}

export function DashboardView({ onTabChange }: { onTabChange: (tab: string) => void }) {
  const [showCreateUserForm, setShowCreateUserForm] = useState(false);
  
  return (
    <div className="space-y-6 p-4 sm:p-6 max-w-7xl mx-auto w-full">
      {/* En-tête */}
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-6">
        <div className="space-y-1">
          <h1 className="text-2xl font-bold text-gray-900">Tableau de bord</h1>
          <p className="text-sm text-gray-500">Bienvenue dans l'administration de Pueri Angeli</p>
        </div>
        <div className="w-full sm:w-auto">
          <button
            onClick={() => setShowCreateUserForm(!showCreateUserForm)}
            className="w-full sm:w-auto flex items-center justify-center gap-2 bg-brand text-white px-4 py-2 rounded-md hover:bg-brand/90 transition-colors text-sm font-medium"
          >
            {showCreateUserForm ? (
              <>
                <X className="h-4 w-4" />
                <span>Fermer le formulaire</span>
              </>
            ) : (
              <>
                <Plus className="h-4 w-4" />
                <span>Nouvel utilisateur</span>
              </>
            )}
          </button>
        </div>
      </div>
      
      {showCreateUserForm && (
        <div className="bg-white rounded-lg shadow overflow-hidden">
          <CreateUserForm />
        </div>
      )}

      {/* Cartes de statistiques */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
        <KpiCard 
          icon={<Users className="h-5 w-5" />} 
          label="Professeurs" 
          value="24" 
          trend="up"
          trendLabel="+3 ce mois-ci"
        />
        <KpiCard 
          icon={<Users className="h-5 w-5" />} 
          label="Parents" 
          value="120" 
          trend="up"
          trendLabel="+12 ce mois-ci"
        />
        <KpiCard 
          icon={<Users className="h-5 w-5" />} 
          label="Élèves" 
          value="340" 
          trend="up"
          trendLabel="+28 cette année"
        />
        <KpiCard 
          icon={<BookOpen className="h-5 w-5" />} 
          label="Classes actives" 
          value="15" 
        />
      </div>

      {/* Grille principale */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Activité récente */}
        <div className="lg:col-span-2">
          <div className="bg-white rounded-lg border border-gray-200 shadow-sm overflow-hidden h-full flex flex-col">
            <div className="px-4 py-3 sm:px-6 border-b border-gray-200 flex items-center justify-between bg-gray-50">
              <h2 className="text-base font-semibold text-gray-900">Activité récente</h2>
              <button className="text-sm font-medium text-brand-600 hover:text-brand-700 hover:underline transition-colors">
                Voir tout
              </button>
            </div>
            <div className="divide-y divide-gray-200 flex-1">
              <NotificationItem
                title="Nouveaux utilisateurs"
                time="Il y a 2 heures"
                message="3 nouveaux comptes parents ont été créés aujourd'hui."
                isNew={true}
              />
              <NotificationItem
                title="Mise à jour système"
                time="Hier"
                message="La version 2.1.0 a été déployée avec succès."
              />
              <NotificationItem
                title="Rapport mensuel"
                time="Il y a 3 jours"
                message="Le rapport d'activité de septembre est disponible."
              />
            </div>
          </div>
        </div>

        {/* Colonne de droite */}
        <div className="space-y-6">
          {/* Actions rapides */}
          <div className="bg-white rounded-lg border border-gray-200 shadow-sm overflow-hidden">
            <div className="px-4 py-3 sm:px-6 border-b border-gray-200 bg-gray-50">
              <h2 className="text-base font-semibold text-gray-900">Actions rapides</h2>
            </div>
            <div className="p-4 space-y-3">
              <QuickActionButton 
                icon={<UserPlus className="h-5 w-5" />} 
                label="Ajouter un utilisateur" 
                description="Créer un nouveau compte utilisateur"
                onClick={() => setShowCreateUserForm(true)}
              />
              <QuickActionButton 
                icon={<BookOpen className="h-5 w-5" />} 
                label="Créer une classe" 
                description="Ajouter une nouvelle classe"
                onClick={() => onTabChange('classes')}
              />
              <QuickActionButton 
                icon={<FileText className="h-5 w-5" />} 
                label="Générer un rapport" 
                description="Exporter les données du mois"
                onClick={() => {}}
              />
              <QuickActionButton 
                icon={<Calendar className="h-5 w-5" />} 
                label="Voir le calendrier" 
                description="Accéder au calendrier scolaire"
                onClick={() => {}}
              />
            </div>
          </div>

          {/* Prochaines échéances */}
          <div className="bg-white rounded-lg border border-gray-200 shadow-sm overflow-hidden">
            <div className="px-4 py-3 sm:px-6 border-b border-gray-200 bg-gray-50">
              <h2 className="text-base font-semibold text-gray-900">Prochaines échéances</h2>
            </div>
            <div className="divide-y divide-gray-200">
              {[
                { title: 'Réunion des professeurs', date: '15 Octobre 2023', time: '14:00 - 16:00' },
                { title: 'Remise des bulletins', date: '20 Octobre 2023', time: 'Toute la journée' },
                { title: 'Vacances de la Toussaint', date: '23 Octobre 2023', time: 'Toute la journée' }
              ].map((event, index) => (
                <div key={index} className="p-4 hover:bg-gray-50 transition-colors">
                  <div className="flex items-start gap-3">
                    <div className="mt-0.5 flex-shrink-0">
                      <div className="h-2.5 w-2.5 rounded-full bg-brand-500"></div>
                    </div>
                    <div className="flex-1 min-w-0">
                      <h3 className="text-sm font-medium text-gray-900">{event.title}</h3>
                      <div className="mt-1 flex items-center text-sm text-gray-500">
                        <span>{event.date}</span>
                        <span className="mx-1">•</span>
                        <span>{event.time}</span>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
